// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createShortUrl = `-- name: CreateShortUrl :one
INSERT INTO
  short_urls (user_id, slug, original_url, expires_at)
VALUES
  ($1, $2, $3, $4) RETURNING id
`

type CreateShortUrlParams struct {
	UserID      uuid.UUID          `json:"user_id"`
	Slug        string             `json:"slug"`
	OriginalUrl string             `json:"original_url"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateShortUrl(ctx context.Context, arg CreateShortUrlParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createShortUrl,
		arg.UserID,
		arg.Slug,
		arg.OriginalUrl,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreatetUser :one
INSERT INTO
  users (NAME, email)
VALUES
  ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteShortUrl = `-- name: DeleteShortUrl :exec
DELETE FROM
  short_urls
WHERE
  id = $1
`

func (q *Queries) DeleteShortUrl(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteShortUrl, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
  users
WHERE
  id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getShortUrlById = `-- name: GetShortUrlById :one
SELECT
  id, user_id, slug, original_url, created_at, expires_at, access_count
FROM
  short_urls
WHERE
  id = $1
`

func (q *Queries) GetShortUrlById(ctx context.Context, id uuid.UUID) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, getShortUrlById, id)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.AccessCount,
	)
	return i, err
}

const getShortUrlBySlug = `-- name: GetShortUrlBySlug :one
SELECT
  id, user_id, slug, original_url, created_at, expires_at, access_count
FROM
  short_urls
WHERE
  slug = $1
`

func (q *Queries) GetShortUrlBySlug(ctx context.Context, slug string) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, getShortUrlBySlug, slug)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.AccessCount,
	)
	return i, err
}

const getShortUrlsByUserId = `-- name: GetShortUrlsByUserId :many
SELECT
  id, user_id, slug, original_url, created_at, expires_at, access_count
FROM
  short_urls
WHERE
  user_id = $1
`

func (q *Queries) GetShortUrlsByUserId(ctx context.Context, userID uuid.UUID) ([]ShortUrl, error) {
	rows, err := q.db.Query(ctx, getShortUrlsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShortUrl
	for rows.Next() {
		var i ShortUrl
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Slug,
			&i.OriginalUrl,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.AccessCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  id, name, email, created_at
FROM
  users
WHERE
  id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id, name, email, created_at
FROM
  users
WHERE
  email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
  id, name, email, created_at
FROM
  users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementAccessCount = `-- name: IncrementAccessCount :exec
UPDATE
  short_urls
SET
  access_count = access_count + $2
WHERE
  slug = $1
`

type IncrementAccessCountParams struct {
	Slug        string  	  `json:"slug"`
	AccessCount pgtype.Int4 `json:"access_count"`
}

func (q *Queries) IncrementAccessCount(ctx context.Context, arg IncrementAccessCountParams) error {
	_, err := q.db.Exec(ctx, incrementAccessCount, arg.Slug, arg.AccessCount)
	return err
}

const updateShortUrl = `-- name: UpdateShortUrl :one
UPDATE
  short_urls
SET
  slug = $2,
  original_url = $3,
  expires_at = $4
WHERE
  id = $1 RETURNING id
`

type UpdateShortUrlParams struct {
	ID          uuid.UUID          `json:"id"`
	Slug        string             `json:"slug"`
	OriginalUrl string             `json:"original_url"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) UpdateShortUrl(ctx context.Context, arg UpdateShortUrlParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateShortUrl,
		arg.ID,
		arg.Slug,
		arg.OriginalUrl,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
  users
SET
  NAME = $2,
  email = $3
WHERE
  id = $1 RETURNING id
`

type UpdateUserParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
