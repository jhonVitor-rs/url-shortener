version: "3.8"

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    # restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
      # - ./letsencrypt:/letsencrypt  # Para SSL
    networks:
      - shorter-url
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"


  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
      POSTGRES_DB: "${DATABASE_NAME}"
      POSTGRES_MULTIPLE_DATABASES: "${DATABASE_NAME}_test"
    volumes:
      - db:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh:ro
    networks:
      - shorter-url
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      sh -c "if [ -n \"${REDIS_PASSWORD}\" ]; then
               exec redis-server --requirepass ${REDIS_PASSWORD};
             else
               exec redis-server;
             fi"
    volumes:
      - redis-data:/data
    networks:
      - shorter-url
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shorter-url-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: "${DATABASE_USER}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "${DATABASE_NAME}"
      REDIS_HOST: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - shorter-url
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.localhost`) || Host(`shorter-url.localhost`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8080"
      # Middlewares para seguran√ßa
      - "traefik.http.routers.app.middlewares=security-headers,rate-limit"
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=100"


volumes:
  db:
  redis-data:

networks:
  shorter-url:
    driver: bridge